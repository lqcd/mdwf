;; projections
(array x-spinor        "x_Spinor"   COMPLEX       (const *fermion-dim*))
(array x-half-spinor   "x_HSpinor"  COMPLEX       (const (/ *fermion-dim* 2)))
(array x-fermion       "x_Fermion"  x-spinor      (const *colors*))
(array x-half-fermion  "x_HFermion" x-half-spinor (const *colors*))
(array x-gauge         "x_SU3"      COMPLEX       (const (* *colors* *colors*)))

(structure shift-data "su_data" ([f-offset    "f_offset" int]
                                 [u-offset    "u_offset" int]))

(procedure shift-up ([stem "shift_up" d p/m]
                      count-flops)
              ([size   int       "int"                  "size"]
               [Ls     int       "int"                  "ls"]
               [res    pointer   "struct HalfFermion *" "result"]
               [index  pointer   "struct sd_data *"     "index"]
               [U      pointer   "struct SU3 *"         "U"]
               [src    pointer   "struct Fermion *"     "source"])
   (loop () (i [const 0] [reg size])
     (load int () s-index ([reg index] [const (offset-of shift-data f-offset)]))
     (load int () u-index ([reg index] [const (offset-of shift-data u-offset)]))
     (op mul-int () (s-offset) ([reg s-index] [const (size-of x-fermion)]))
     (op mul-int () (u-offset) ([reg u-index] [const (size-of x-gauge)]))
     (load x-gauge () uuu ([reg U] [reg u-offset]))
     (loop () (s [const 0] [reg Ls])
       (load x-fermion () s ([reg src] [reg s-offset]))
       (op spin-project ([sign p/p] [direction d]) (xx) ([reg s]))
       (op mul-su3-conj () (r) ([reg uuu] [reg xx]))
       (store x-half-fermion () ([reg res]) [reg r])
       (op add-int () (s-offset) ([reg s-offset] [const (size-of x-fermion)]))
       (op add-int () (res) ([reg res] [const (size-of x-half-fermion)])))
     (op add-int () (index) ([reg index] [const (size-of shift-data)]))))
