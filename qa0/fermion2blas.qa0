(verbose [(c99 bgl/xlc) "/* $Id$ */"])
(include "types.qa0")

;; convert inner MDWF memory into Fortran's complex array
;; r memory order:
;;  [0].[0][0].re
;;  [0].[0][0].im
;;  [0].[0][1].re
;;  [0].[0][1].im
;;  ...
;;  [0].[0][nF-1].im
;;  [1].[1][0].re
;;  ...
;;  [0].[nC-1][nF-1].im
;;  [1].[0][0].re
;;  ...
;;  [d-1].[nC-1][nF-1].im
;;
(procedure fermion->blas ([stem "fermion2blas"]
                               prec&color)
           ([data      pointer "r"         "void *"                 ]
            [F         pointer "F"         "const struct Fermion *" ]
            [size      int     "size"      "int"                    ]
            [l-s       int     "Ls"        "int"                    ])

   (loop () (x [const 0] [reg size])
     (loop () (i [const 0] [reg l-s])
       (loop () (c [const 0] [const *colors*])
         (loop () (d [const 0] [const *fermion-dim*])
           (op qcd-fermion-offset () (cd) ([reg c] [reg d]))
           (op pointer-add () (p) ([reg F] [reg cd]))
           (load COMPLEX () v ([reg p]))
           (op complex-real () (v-re) ([reg v]))
           (op complex-imag () (v-im) ([reg v]))
           (store REAL () ([reg data]) [reg v-re])
           (store REAL () ([reg data] [const (size-of REAL)]) [reg v-im])
           (op pointer-add () (data) ([reg data] [const (* 2 (size-of REAL))]))
         ))
       (op pointer-add () (F) ([reg F] [const (size-of Fermion)])))))
