(module qa0
        mzscheme
   (require "common.ss")
   (require "be-c99.ss")
   (require "cheader.ss")
   (require "backend.ss")
   (require "parser.ss")
   (require "cfold.ss")
   (require "q2complex.ss")

   (define *version* "$Id$")
   (define (do-help arg*)
     (for-each (lambda (cdf) (printf "\t~a\t~a~%" (car cdf) (cadr cdf)))
	       cmd*))
   (define (do-header arg*)
     (if (not  (= (vector-length arg*) 4))
	 (error 'qa0 "bad arguments"))
     (let* ([d/f (vector-ref arg* 1)]
	    [output (vector-ref arg* 2)]
	    [input (vector-ref arg* 3)]
	    [d/f (cond
		  [(string=? d/f "double") 'double]
		  [(string=? d/f "float") 'float]
		  [else (error 'qa "Unexpected value for d/f: ~a" d/f)])])
       (if (file-exists? output) (delete-file output))
       (with-output-to-file output
	 (lambda ()
	   (printf "/* automagically generated by qa0 ~a */~%" *version*)
	   (qa0-compile input machine-c99-32 d/f c-header)))))
   (define (do-c99 arg*)
     (if (not  (= (vector-length arg*) 4))
         (error 'qa0 "bad arguments"))
     (let* ([machine machine-c99-32]
	    [d/f (vector-ref arg* 1)]
            [output (vector-ref arg* 2)]
            [input (vector-ref arg* 3)]
            [d/f (cond
		  [(string=? d/f "double") 'double]
		  [(string=? d/f "float") 'float]
		  [else (error 'qa "Unexpected value for d/f: ~a" d/f)])])
       (if (file-exists? output) (delete-file output))
       (with-output-to-file output
	 (lambda ()
	   (printf "/* automagically generated by qa0 ~a */~%" *version*)
	   (qa0-compile input machine d/f
			(lambda (ast env) (emit-back-end ast env)))))))
   (define (do-version arg*)
     (printf "qa0: ~a~%" *version*))
   (define (qa0-compile name machine d/f back-end)
     (let-values* ([ast (parse-qa0-file name)]
                   [(ast env) (fold-constants/env ast machine d/f)]
                   [(ast e-x) (qcd->complex ast env)]
                   [(ast env) (complex->back-end ast env)])
        (back-end ast env)))
   (define cmd*
     `(("help"    "             print available commands"        ,do-help)
       ("header"  "d/f out in   build .h file for double/float"  ,do-header)
       ("c99"     "d/f out in   build .c file for double/float"  ,do-c99)
       ("version" "             print qa0 version"               ,do-version)))

   (define (dispatch name arg*)
     (let loop ([cmd* cmd*])
       (cond
	[(null? cmd*) (printf "qa0: Unknown command ~s. Try saying qa0 help~%"
			      name)]
	[(string=? name (caar cmd*)) ((caddar cmd*) arg*)]
	[else (loop (cdr cmd*))])))

   (let ([arg* (current-command-line-arguments)])
     (if (zero? (vector-length arg*))
         (dispatch "help" '#("help"))
         (dispatch (vector-ref arg* 0) arg*))))
