(verbose [c99 "/* QA macros $Id$ */"])
;;; Pieces for A etc.
(define (get-A&addr f-c addr-l addr-h v-c v-l v-h t x)
  (load int () hi-index ([reg t] [const (offset-of AB-Table hi-index)]))
  (load int () lo-index ([reg t] [const (offset-of AB-Table lo-index)]))
  (load double () v-c ([reg t] [const (offset-of AB-Table c-value)]))
  (load double () v-l ([reg t] [const (offset-of AB-Table lo-value)]))
  (load double () v-h ([reg t] [const (offset-of AB-Table hi-value)]))
  (op pointer-add () (t) ([reg t] [const (size-of AB-Table)]))
  (op int-mul () (hi-off) ([reg hi-index] [const (size-of Fermion)]))
  (op int-mul () (lo-off) ([reg lo-index] [const (size-of Fermion)]))
  (op pointer-add () (addr-l) ([reg x] [reg hi-off]))
  (op pointer-add () (addr-h) ([reg x] [reg lo-off]))
  (load qcd-fermion () f-c ([reg x]))
  (op pointer-add () (x) ([reg x] [const (size-of Fermion)])))

(define (get-A&x f-c f-l f-h v-c v-l v-h t x)
  (macro get-A&addr [reg f-c] [reg a-l] [reg a-h]
                    [reg v-c] [reg v-l] [reg v-h] [reg t] [reg x])
  (load qcd-fermion-hi () f-h ([reg a-h]))
  (load qcd-fermion-lo () f-l ([reg a-l])))

(define (get-A*&x f-c f-l f-h v-c v-l v-h t x)
  (macro get-A&addr [reg f-c] [reg a-l] [reg a-h]
                    [reg v-c] [reg v-l] [reg v-h] [reg t] [reg x])
  (load qcd-fermion-hi () f-h ([reg a-l]))
  (load qcd-fermion-lo () f-l ([reg a-h])))

;; compute r = A x in a point, advance r, x and t
(define (compute-A r t x)
  (macro get-A&x [reg f-c] [reg f-l] [reg f-h]
                 [reg v-c] [reg v-l] [reg v-h] [reg t] [reg x])
  (op qcd-scalef () (g-c) ([reg v-c] [reg f-c]))
  (op qcd-madd-lohi () (g) ([reg g-c] [reg v-l] [reg f-l] [reg v-h] [reg f-h]))
;  (store qcd-fermion () ([reg r]) [reg g])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;; compute r = A* x in a point, advance r, x and t
(define (compute-A* r t x)
  (macro get-A*&x [reg f-c] [reg f-l] [reg f-h]
                  [reg v-c] [reg v-l] [reg v-h] [reg t] [reg x])
  (op qcd-scalef () (g-c) ([reg v-c] [reg f-c]))
  (op qcd-madd-lohi () (g) ([reg g-c] [reg v-l] [reg f-l] [reg v-h] [reg f-h]))
;  (store qcd-fermion () ([reg r]) [reg g])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;; compute r = A x + B y in a point, advance r, x, y, and tables
(define (compute-A+B r t-A x-a t-B x-b)
  (macro get-A&x [reg fa-c] [reg fa-l] [reg fa-h]
                 [reg va-c] [reg va-l] [reg va-l] [reg t-A] [reg x-a])
  (op qcd-scalef () (g) ([reg va-c] [reg fa-c]))
  (op qcd-madd-lohi () (h) ([reg g]
                            [reg va-l] [reg fa-l]
                            [reg va-h] [reg fa-h]))
  (macro get-A&x [reg fb-c] [reg fb-l] [reg fb-h]
                 [reg vb-c] [reg vb-l] [reg vb-l] [reg t-B] [reg x-b])
  (op qcd-maddf () (g-r) ([reg h] [reg vb-c] [reg fb-c]))
  (op qcd-madd-lohi () (z) ([reg g-r]
                            [reg vb-l] [reg fb-l]
                            [reg vb-h] [reg fb-h]))
;  (store qcd-fermion () ([reg r]) [reg z])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;; compute r = A* x + B* y in a point, advance r, x, y, and tables
(define (compute-A*+B* r t-A x-a t-B x-b)
  (macro get-A*&x [reg fa-c] [reg fa-l] [reg fa-h]
                  [reg va-c] [reg va-l] [reg va-h] [reg t-A] [reg x-a])
  (op qcd-scalef () (g) ([reg va-c] [reg fa-c]))
  (op qcd-madd-lohi () (h) ([reg g]
                            [reg va-l] [reg fa-l]
                            [reg va-h] [reg fa-h]))
  (macro get-A*&x [reg fb-c] [reg fb-l] [reg fb-h]
                  [reg vb-c] [reg vb-l] [reg vb-h] [reg t-B] [reg x-b])
  (op qcd-maddf () (g-r) ([reg h] [reg vb-c] [reg fb-c]))
  (op qcd-madd-lohi () (z) ([reg g-r]
                            [reg vb-l] [reg fb-l]
                            [reg vb-h] [reg fb-h]))
;  (store qcd-fermion () ([reg r]) [reg z])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;; compute r = x + A y in a point, advance r, x, y, and tables
(define (compute-1+A r x-a t-B x-b)
  (load qcd-fermion () x ([reg x-a]))
  (op pointer-add () (x-a) ([reg x-a] [const (size-of Fermion)]))
  (macro get-A&x [reg fb-c] [reg fb-l] [reg fb-h]
                 [reg vb-c] [reg vb-l] [reg vb-l] [reg t-B] [reg x-b])
  (op qcd-maddf () (g-r) ([reg x] [reg vb-c] [reg fb-c]))
  (op qcd-madd-lohi () (z) ([reg g-r]
                            [reg vb-l] [reg fb-l]
                            [reg vb-h] [reg fb-h]))
;  (store qcd-fermion () ([reg r]) [reg z])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;; compute r = x + A* y in a point, advance r, x, y, and tables
(define (compute-1+A* r x-a t-B x-b)
  (load qcd-fermion () x ([reg x-a]))
  (op pointer-add () (x-a) ([reg x-a] [const (size-of Fermion)]))
  (macro get-A*&x [reg fb-c] [reg fb-l] [reg fb-h]
                  [reg vb-c] [reg vb-l] [reg vb-l] [reg t-B] [reg x-b])
  (op qcd-maddf () (g-r) ([reg x] [reg vb-c] [reg fb-c]))
  (op qcd-madd-lohi () (z) ([reg g-r]
                            [reg vb-l] [reg fb-l]
                            [reg vb-h] [reg fb-h]))
;  (store qcd-fermion () ([reg r]) [reg z])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)])))

;;;;

;; compute r = A x on one S-slice, advance r and x
(define (S-compute-A r l-s table x)
  (op pointer-move () (t-s) ([reg table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-A [reg r] [reg t-s] [reg x])))

;; compute r = A x + B y on one S-slice, advance r, x, and y
(define (S-compute-A+B r l-s a-table x b-table y)
  (op pointer-move () (t-a) ([reg a-table]))
  (op pointer-move () (t-b) ([reg b-table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-A+B [reg r] [reg t-a] [reg x] [reg t-b] [reg y])))

;; compute r = x + A y on one S-slice, advance r, x, and y
(define (S-compute-1+A r l-s x a-table y)
  (op pointer-move () (t-a) ([reg a-table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-1+A [reg r] [reg x] [reg t-a] [reg y])))

;; compute r = A* x on one S-slice, advance r and x
(define (S-compute-A* r l-s table x)
  (op pointer-move () (t-s) ([reg table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-A* [reg r] [reg t-s] [reg x])))

;; compute r = A* x + B* y on one S-slice, advance r, x, and y
(define (S-compute-A*+B* r l-s a-table x b-table y)
  (op pointer-move () (t-a) ([reg a-table]))
  (op pointer-move () (t-b) ([reg b-table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-A*+B* [reg r] [reg t-a] [reg x] [reg t-b] [reg y])))

;; compute r = x + A* y on one S-slice, advance r, x, and y
(define (S-compute-1+A* r l-s x a-table y)
  (op pointer-move () (t-a) ([reg a-table]))
  (loop () (s [const 0] [reg l-s])
    (macro compute-1+A* [reg r] [reg x] [reg t-a] [reg y])))
