;; Macros for F
(include "defs-spin.qa0")

(define (get-up-mask&f&V remote? f-off V d mask nb U s-line)
  (op nop (start get-up-mask&f&V d) () ())
  (op int-and () (remote?) ([reg mask] [const (shift 1 d)]))
  (load int () U-idx ([reg nb] [const (offset-of neighbor up-u)]))
  (op int-add () (U-idx-d) ([reg U-idx] [const d]))
  (op int-mul () (U-off) ([reg U-idx-d] [const (size-of SU-n)]))
  (op pointer-add () (U-addr) ([reg U] [reg U-off]))
  (load qcd-su-n () V ([reg U-addr]))
  (load int () up-f ([reg nb] [const (+ (offset-of neighbor up-f)
				        (* d (size-of int)))]))
  (op int-mul () (f-off) ([reg up-f] [reg s-line]))
  (op nop (end get-up-mask&f&V d) () ()))

(define (get-down-mask&f remote? f-off d mask nb s-line)
  (op nop (start get-down-mask&f d) () ())
  (op int-and () (remote?) ([reg mask] [const (shift 1 (+ d *dim*))]))
  (load int () down-f ([reg nb] [const (+ (offset-of neighbor down-f)
                                          (* d (size-of int)))]))
  (op int-mul () (f-off) ([reg down-f] [reg s-line]))
  (op nop (end get-down-mask&f d) () ()))

(define (get-down-V V d nb U)
  (op nop (start get-down-V d) () ())
  (load int () U-idx ([reg nb] [const (+ (offset-of neighbor down-u)
					 (* d (size-of int)))]))
  (op int-mul () (U-off) ([reg U-idx] [const (size-of SU-n)]))
  (op pointer-add () (U-addr) ([reg U] [reg U-off]))
  (load qcd-su-n () V ([reg U-addr]))
  (op nop (end get-down-V d) () ()))

;;;

(define (face-link link-op g-op d r U f)
  (op nop (start-face link-op g-op d) () ())
  (load qcd-projected-fermion () h ([reg f]))
  (op pointer-add () (f) ([reg f] [const (size-of Projected-Fermion)]))
  (macro link-op [const g-op] [const d] [reg q] [reg r] [reg U] [reg h])
  (store qcd-fermion () ([reg r]) [reg q])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)]))
  (op nop (end-face link-op g-op d) () ()))

(define (face-line elem-op g-op d l-s res-x V f-off buf*)
  (op nop (start face-line elem-op g-op d) () ())
  (load pointer () *f ([reg buf*] [const (* d (size-of int))]))
  (op pointer-add () (f) ([reg *f] [reg f-off]))
  (op pointer-move () (r) ([reg res-x]))
  (loop () (s [const 0] [reg l-s])
    (macro face-link [macro elem-op] [const g-op] [const d]
                     [reg r] [reg V] [reg f]))
  (op nop (end face-line elem-op g-op d) () ()))

;;;

(define (body-link link-op g-op d r U f)
  (op nop (start-body link-op g-op d) () ())
  (load qcd-fermion () hh ([reg f]))
  (op pointer-add () (f) ([reg f] [const (size-of Fermion)]))
  (macro link-op [const g-op] [const d] [reg q] [reg r] [reg U] [reg hh])
  (store qcd-fermion () ([reg r]) [reg q])
  (op pointer-add () (r) ([reg r] [const (size-of Fermion)]))
  (op nop (end-body link-op g-op d) () ()))

(define (body-line elem-op g-op d l-s res-x V f-off src-y)
  (op nop (start body-line elem-op g-op d) () ())
  (op pointer-add () (f) ([reg src-y] [reg f-off]))
  (op pointer-move () (r) ([reg res-x]))
  (loop () (s [const 0] [reg l-s])
    (macro body-link [macro elem-op] [const g-op] [const d]
                     [reg r] [reg V] [reg f]))
  (op nop (end body-line elem-op g-op d) () ()))

;;;

(define (F-start-up g-op d mask res-x l-s s-line nb U src-y buf*)
  (macro get-up-mask&f&V [reg remote?] [reg f-off] [reg V]
                         [const d] [reg mask] [reg nb] [reg U] [reg s-line])
  (op nop (F-start-up g-op d) () ())
  (if-else [reg remote?]
    (macro face-line [macro unproject-U] [const g-op]
	             [const d]
	             [reg l-s] [reg res-x] [reg V] [reg f-off] [reg buf*])
    (macro body-line [macro one-x-gamma-U] [const g-op]
	             [const d]
                     [reg l-s] [reg res-x] [reg V] [reg f-off] [reg src-y])))

(define (F-start-down g-op d mask res-x l-s s-line nb U src-y buf*)
  (macro get-down-mask&f [reg remote?] [reg f-off]
                         [const d] [reg mask] [reg nb] [reg s-line])
  (op nop (F-start-down g-op d) () ())
  (if-else [reg remote?]
    (macro face-line [macro unproject] [const g-op]
	             [const d]
                     [reg l-s] [reg res-x] [reg V] [reg f-off] [reg buf*])
    (begin
      (macro get-down-V [reg V] [const d] [reg nb] [reg U])
      (macro body-line [macro one-x-gamma-U*] [const g-op]
	               [const d]
                       [reg l-s] [reg res-x] [reg V] [reg f-off] [reg src-y]))))

(define (F-next-up g-op d mask res-x l-s s-line nb U src-y buf*)
  (macro get-up-mask&f&V [reg remote?] [reg f-off] [reg V]
                         [const d] [reg mask] [reg nb] [reg U] [reg s-line])
  (op nop (F-next-up g-op d) () ())
  (if-else [reg remote?]
    (macro face-line [macro add-unproject-U] [const g-op]
                     [const d]
                     [reg l-s] [reg res-x] [reg V] [reg f-off] [reg buf*])
    (macro body-line [macro add-one-x-gamma-U] [const g-op]
                     [const d]
                     [reg l-s] [reg res-x] [reg V] [reg f-off] [reg src-y])))

(define (F-next-down g-op d mask res-x l-s s-line nb U src-y buf*)
  (macro get-down-mask&f [reg remote?] [reg f-off]
                         [const d] [reg mask] [reg nb] [reg s-line])
  (op nop (F-next-down g-op d) () ())
  (if-else [reg remote?]
    (macro face-line [macro add-unproject] [const g-op]
	             [const d]
		     [reg l-s] [reg res-x] [reg V] [reg f-off] [reg buf*])
    (begin
      (macro get-down-V [reg V] [const d] [reg nb] [reg U])
      (macro body-line [macro add-one-x-gamma-U*] [const g-op]
	               [const d]
		       [reg l-s] [reg res-x] [reg V] [reg f-off] [reg src-y]))))

;;;

(define (S-compute-F up-sign down-sign res-x l-s s-line nb U src-y buf*)
  (load int () mask ([reg nb] [const (offset-of neighbor mask)]))
  (op nop (First direction) () ())
  (repeat ((d [const 0] [const *dim*]))
    (if [const (= d *mdwf-start-sum-dimension*)]
      (if-else [const (= up-sign *mdwf-start-sum-direction*)]
        ;; start with up
        (begin
          (op nop (Start with d up) () ())
          (macro F-start-up [const up-sign]
                            [const d] [reg mask] [reg res-x]
                            [reg l-s] [reg s-line] [reg nb] [reg U]
                            [reg src-y] [reg buf*])
          (macro F-next-down [const down-sign]
       	     	             [const d] [reg mask] [reg res-x]
			     [reg l-s] [reg s-line] [reg nb] [reg U]
                             [reg src-y] [reg buf*]))
        ;; start with down
        (begin
          (op nop (Start with d down) () ())
          (macro F-start-down [const down-sign]
                              [const d] [reg mask] [reg res-x]
			      [reg l-s] [reg s-line] [reg nb] [reg U]
                              [reg src-y] [reg buf*])
          (macro F-next-up [const up-sign]
       	     	           [const d] [reg mask] [reg res-x]
			   [reg l-s] [reg s-line] [reg nb] [reg U]
                           [reg src-y] [reg buf*])))))
  (op nop (Other directions) () ())
  (repeat ((d [const 0] [const *dim*]))
    (if [const (not (= d *mdwf-start-sum-dimension*))]
      (begin
        ;; continue with up
        (macro F-next-up [const up-sign]
        	         [const d] [reg mask] [reg res-x]
			 [reg l-s] [reg s-line] [reg nb] [reg U]
                         [reg src-y] [reg buf*])
        ;; continue with down               
        (macro F-next-down [const down-sign]
        	     	   [const d] [reg mask] [reg res-x]
			   [reg l-s] [reg s-line] [reg nb] [reg U]
                           [reg src-y] [reg buf*]))))
  (op pointer-add () (nb) ([reg nb] [const (size-of neighbor)]))
  (op pointer-add () (res-x) ([reg res-x] [reg s-line])))

;;
(define (S-compute-add-F up-sign down-sign res-x l-s s-line nb U src-y buf*)
  (load int () mask ([reg nb] [const (offset-of neighbor mask)]))
  (op nop (First direction) () ())
  (repeat ((d [const 0] [const *dim*]))
    ;; continue with up
    (macro F-next-up [const up-sign]
      	             [const d] [reg mask] [reg res-x]
	             [reg l-s] [reg s-line] [reg nb] [reg U]
                     [reg src-y] [reg buf*])
    ;; continue with down               
    (macro F-next-down [const down-sign]
        	       [const d] [reg mask] [reg res-x]
		       [reg l-s] [reg s-line] [reg nb] [reg U]
                       [reg src-y] [reg buf*]))
  (op pointer-add () (nb) ([reg nb] [const (size-of neighbor)]))
  (op pointer-add () (res-x) ([reg res-x] [reg s-line])))
