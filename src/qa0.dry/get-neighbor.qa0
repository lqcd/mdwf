(verbose [c99 "/* QA0 source $Id$ */"])
(verbose [c99 "struct neighbor;"])

(include "types.qa0")

(procedure get-neighbor ([stem "get_neighbor"])
           ([mask      pointer "mask"      "int *"                   ]
            [up-f      pointer "up_f"      "int *"                   ]
            [up-U      pointer "up_u"      "int *"                   ]
            [down-f    pointer "down_f"    "int *"                   ]
            [down-U    pointer "down_U"    "int *"                   ]
            [neighbor  pointer "neighbor"  "const struct neighbor *" ]
            [index     int     "p"         "int"                     ])
   (op int-mul () (x) ([reg index] [const (size-of neighbor)]))
   (op pointer-add () (ptr) ([reg neighbor] [reg x]))

   (load int () v-m ([reg ptr] [const (offset-of neighbor mask)]))
   (store int () ([reg mask]) [reg v-m])

   (load int () v-uu ([reg ptr] [const (offset-of neighbor up-u)]))
   (store int () ([reg up-U]) [reg v-uu])

   (op pointer-add () (uf) ([reg ptr] [const (offset-of neighbor up-f)]))
   (op pointer-add () (df) ([reg ptr] [const (offset-of neighbor down-f)]))
   (op pointer-add () (dU) ([reg ptr] [const (offset-of neighbor down-u)]))
   (loop () (i [const 0] [const *dim*])
     (load int () v-uf ([reg uf]))
     (load int () v-df ([reg df]))
     (load int () v-du ([reg dU]))
     (op pointer-add () (uf) ([reg uf] [const (size-of int)]))  
     (op pointer-add () (df) ([reg df] [const (size-of int)]))  
     (op pointer-add () (dU) ([reg dU] [const (size-of int)]))
     (store int () ([reg up-f]) [reg v-uf])
     (store int () ([reg down-f]) [reg v-df])
     (store int () ([reg down-U]) [reg v-du])
     (op pointer-add () (up-f) ([reg up-f] [const (size-of int)]))  
     (op pointer-add () (down-f) ([reg down-f] [const (size-of int)]))  
     (op pointer-add () (down-U) ([reg down-U] [const (size-of int)]))))
