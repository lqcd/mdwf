(verbose [c99 "/* QA0 source $Id: do-apf.qa0 283 2007-10-31 17:39:15Z avp $ */"])
(verbose [c99 "#include <complex.h>"])
(verbose [c99 "struct Fermion;"])
(verbose [c99 "struct ABTable;"])
(verbose [c99 "struct neighbor;"])
(verbose [c99 "struct SUn;"])

(include "types.qa0")

(procedure do-AxpBxFx ([stem "do_AxpBxFx"]
                       prec&color
                       count-flops)
       ([res-x     pointer   "res_x"    "struct Fermion *"         ]
        [start     int       "start"    "int"                      ]
        [size      int       "size"     "int"                      ]
        [l-s       int       "Ls"       "int"        		   ]
	[a-table   pointer   "a_table"  "const struct ABTable *"   ]
	[b-table   pointer   "b_table"  "const struct ABTable *"   ]
	[nb        pointer   "neighbor" "const struct neighbor *"  ]
	[U         pointer   "U"        "const struct SUn *"       ]
	[src-x     pointer   "src_x"    "const struct Fermion *"   ]
	[src-y     pointer   "src_y"    "const struct Fermion *"   ]
        [tmp       pointer   "tmp"      "struct Fermion *"         ]
        [buf*      pointer   "rb"       "void **"                  ])
  (op int-mul () (s-line) ([reg l-s] [const (size-of Fermion)]))
  (op int-mul () (x-start) ([reg start] [reg s-line]))
  (op pointer-add () (res-x) ([reg res-x] [reg x-start]))
  (op pointer-add () (src-x) ([reg src-x] [reg x-start]))
  (loop () (i [const 0] [reg size])
    (load int () mask ([reg nb] [const (offset-of neighbor mask)]))
    ;; First term
     (repeat ((d [const 0] [const *dim*]))
       (if [const (= d *mdwf-start-sum-dimension*)]
         (begin
            (if [const (= 'plus *mdwf-start-sum-direction*)]
 	     ;; up neighbor
              (begin
                (op int-and () (remote?) ([reg mask] [const (shift 1 d)]))
                (load int () U-idx ([reg nb] [const (offset-of neighbor up-u)]))
                (op int-add () (U-idx-d) ([reg U-idx] [const d]))
                (op int-mul () (U-off) ([reg U-idx-d] [const (size-of SU-n)]))
                (op pointer-add () (U-addr) ([reg U] [reg U-off]))
                (load qcd-su-n () V ([reg U-addr]))
                (load int () up-f ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor up-f))]))
		(op int-mul () (f-off) ([reg up-f] [reg s-line]))
                (op pointer-move () (ttt) ([reg tmp]))
                (if-else [reg remote?]
                  ;; starting with remote up-neighbor in d: (1+g)U*h
                  (begin
                    (load pointer () f-ptr ([reg buf*] [const (* d (size-of pointer))]))
                    (op pointer-add () (f-addr) ([reg f-ptr] [reg f-off]))
                    (loop () (s [const 0] [reg l-s])
                      (load qcd-projected-fermion () h ([reg f-addr]))
                      (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Projected-Fermion)]))
                      (op qcd-mulh () (g) ([reg V] [reg h]))
                      (op qcd-unproject ([unproject d plus]) (r) ([reg g]))
;                      (store qcd-fermion () ([reg ttt]) [reg r])
                      (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))))
                  ;; starting with local up-neighrbor in d: (1+g)U*f
                  (begin
                    (op pointer-add () (f-addr) ([reg src-y] [reg f-off]))
                    (loop () (s [const 0] [reg l-s])
                      (load qcd-fermion () f ([reg f-addr]))
                      (op qcd-project ([project d plus]) (h) ([reg f]))
                      (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Fermion)]))
                      (op qcd-mulh () (g) ([reg V] [reg h]))
                      (op qcd-unproject ([unproject d plus]) (r) ([reg g]))
;                      (store qcd-fermion () ([reg ttt]) [reg r])
                      (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)])))))))
            (if [const (= 'minus *mdwf-start-sum-direction*)]
 	     ;; down neighbor
              (begin
                (op int-and () (remote?) ([reg mask] [const (shift 1 (+ *dim* d))]))
                (load int () down-f ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor down-f))]))
		(op int-mul () (f-off) ([reg down-f] [reg s-line]))
                (op pointer-move () (ttt) ([reg tmp]))
                (if-else [reg remote?]
                  ;; starting with remote down-neighbor in d: (1-g)h
                  (begin
                    (load pointer () f-ptr ([reg buf*] [const (* (+ *dim* d) (size-of pointer))]))
                    (op pointer-add () (f-addr) ([reg f-ptr] [reg f-off]))
                    (loop () (s [const 0] [reg l-s])
                      (load qcd-projected-fermion () h ([reg f-addr]))
                      (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Projected-Fermion)]))
                      (op qcd-unproject ([unproject d minus]) (r) ([reg h]))
;                      (store qcd-fermion () ([reg ttt]) [reg r])
                      (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))))
                  ;; starting with local down-neighrbor in d: (1-g)U*f
                  (begin
                    (load int () U-idx ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor down-u))]))
                    (op int-mul () (U-off) ([reg U-idx] [const (size-of SU-n)]))
                    (op pointer-add () (U-addr) ([reg U] [reg U-off]))
                    (load qcd-su-n () V ([reg U-addr]))
                    (op pointer-add () (f-addr) ([reg src-y] [reg f-off]))
                    (loop () (s [const 0] [reg l-s])
                      (load qcd-fermion () f ([reg f-addr]))
                      (op qcd-project ([project d minus]) (h) ([reg f]))
                      (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Fermion)]))
                      (op qcd-mulh-conj () (g) ([reg V] [reg h]))
                      (op qcd-unproject ([unproject d minus]) (r) ([reg g]))
;                      (store qcd-fermion () ([reg ttt]) [reg r])
                      (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))))))))))
      ;; Other F+ terms
      (repeat ((d [const 0] [const *dim*]))
        ;; remaining directions and dimensions
        (begin
          (if [const (not (and (= d *mdwf-start-sum-dimension*)
                               (= 'plus *mdwf-start-sum-direction*)))]
            ;; add up neighbor
            (begin
              (op int-and () (remote?) ([reg mask] [const (shift 1 d)]))
              (load int () U-idx ([reg nb] [const (offset-of neighbor up-u)]))
              (op int-add () (U-idx-d) ([reg U-idx] [const d]))
              (op int-mul () (U-off) ([reg U-idx-d] [const (size-of SU-n)]))
              (op pointer-add () (U-addr) ([reg U] [reg U-off]))
              (load qcd-su-n () V ([reg U-addr]))
              (load int () up-f ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor up-f))]))
              (op int-mul () (f-off) ([reg up-f] [reg s-line]))
              (op pointer-move () (ttt) ([reg tmp]))
              (if-else [reg remote?]
                ;; continue with remote up-neighbor in d: (1+g)U*h
                (begin
                  (load pointer () f-ptr ([reg buf*] [const (* d (size-of pointer))]))
                  (op pointer-add () (f-addr) ([reg f-ptr] [reg f-off]))
                  (loop () (s [const 0] [reg l-s])
                    (load qcd-projected-fermion () h ([reg f-addr]))
                    (load qcd-fermion () rr ([reg ttt]))
                    (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Projected-Fermion)]))
                    (op qcd-mulh () (g) ([reg V] [reg h]))
                    (op qcd-unproject-add ([unproject d plus]) (r) ([reg rr] [reg g]))
;                    (store qcd-fermion () ([reg ttt]) [reg r])
                    (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))))
                ;; continue with local up-neighrbor in d: (1+g)U*f
                (begin
                  (op pointer-add () (f-addr) ([reg src-y] [reg f-off]))
                  (loop () (s [const 0] [reg l-s])
                    (load qcd-fermion () f ([reg f-addr]))
                    (load qcd-fermion () rr ([reg ttt]))
                    (op qcd-project ([project d plus]) (h) ([reg f]))
                    (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Fermion)]))
                    (op qcd-mulh () (g) ([reg V] [reg h]))
                    (op qcd-unproject-add ([unproject d plus]) (r) ([reg rr] [reg g]))
;                    (store qcd-fermion () ([reg ttt]) [reg r])
                    (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)])))))))
          (if [const (not (and (= d *mdwf-start-sum-dimension*)
                               (= 'minus *mdwf-start-sum-direction*)))]
            ;; add down neighbor
            (begin
              (op int-and () (remote?) ([reg mask] [const (shift 1 (+ *dim* d))]))
              (load int () down-f ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor down-f))]))
              (op int-mul () (f-off) ([reg down-f] [reg s-line]))
              (op pointer-move () (ttt) ([reg tmp]))
              (if-else [reg remote?]
                ;; starting with remote down-neighbor in d: (1-g)h
                (begin
                  (load pointer () f-ptr ([reg buf*] [const (* (+ *dim* d) (size-of pointer))]))
                  (op pointer-add () (f-addr) ([reg f-ptr] [reg f-off]))
                  (loop () (s [const 0] [reg l-s])
                    (load qcd-projected-fermion () h ([reg f-addr]))
                    (load qcd-fermion () rr ([reg ttt]))
                    (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Projected-Fermion)]))
                    (op qcd-unproject-add ([unproject d minus]) (r) ([reg rr] [reg h]))
;                    (store qcd-fermion () ([reg ttt]) [reg r])
                    (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))))
                ;; starting with local down-neighrbor in d: (1-g)U*f
                (begin
                  (load int () U-idx ([reg nb] [const (+ (* d (size-of int)) (offset-of neighbor down-u))]))
                  (op int-mul () (U-off) ([reg U-idx] [const (size-of SU-n)]))
                  (op pointer-add () (U-addr) ([reg U] [reg U-off]))
                  (load qcd-su-n () V ([reg U-addr]))
                  (op pointer-add () (f-addr) ([reg src-y] [reg f-off]))
                  (loop () (s [const 0] [reg l-s])
                    (load qcd-fermion () f ([reg f-addr]))
                    (load qcd-fermion () rr ([reg ttt]))
                    (op qcd-project ([project d minus]) (h) ([reg f]))
                    (op pointer-add () (f-addr) ([reg f-addr] [const (size-of Fermion)]))
                    (op qcd-mulh-conj () (g) ([reg V] [reg h]))
                    (op qcd-unproject-add ([unproject d minus]) (r) ([reg rr] [reg g]))
;                    (store qcd-fermion () ([reg ttt]) [reg r])
                    (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)])))))))))
     ;; Compute Ax src-x + Bx tmp -> dst
     (op pointer-move () (a-t) ([reg a-table]))
     (op pointer-move () (b-t) ([reg b-table]))
     (op pointer-move () (ttt) ([reg tmp]))
     (loop () (s [const 0] [reg l-s])
       ;; compute addresses for Ax src-x
       (load int () ah-index ([reg a-t] [const (offset-of AB-Table hi-index)]))
       (load int () al-index ([reg a-t] [const (offset-of AB-Table lo-index)]))
       (load double () ac-v ([reg a-t] [const (offset-of AB-Table c-value)]))
       (load double () al-v ([reg a-t] [const (offset-of AB-Table lo-value)]))
       (load double () ah-v ([reg a-t] [const (offset-of AB-Table hi-value)]))
       (op pointer-add () (a-t) ([reg a-t] [const (size-of AB-Table)]))
       (op int-mul () (ah-off) ([reg ah-index] [const (size-of Fermion)]))
       (op int-mul () (al-off) ([reg al-index] [const (size-of Fermion)]))
       (op pointer-add () (ah-addr) ([reg src-x] [reg ah-off]))
       (op pointer-add () (al-addr) ([reg src-x] [reg al-off]))
       ;; compute addresses for Bx ttt
       (load int () bh-index ([reg b-t] [const (offset-of AB-Table hi-index)]))
       (load int () bl-index ([reg b-t] [const (offset-of AB-Table lo-index)]))
       (load double () bc-v ([reg b-t] [const (offset-of AB-Table c-value)]))
       (load double () bl-v ([reg b-t] [const (offset-of AB-Table lo-value)]))
       (load double () bh-v ([reg b-t] [const (offset-of AB-Table hi-value)]))
       (op pointer-add () (b-t) ([reg b-t] [const (size-of AB-Table)]))
       (op int-mul () (bh-off) ([reg bh-index] [const (size-of Fermion)]))
       (op int-mul () (bl-off) ([reg bl-index] [const (size-of Fermion)]))
       (op pointer-add () (bh-addr) ([reg ttt] [reg bh-off]))
       (op pointer-add () (bl-addr) ([reg ttt] [reg bl-off]))
       ;; compute v = Ax src-x
       (load qcd-fermion () fa-c ([reg src-x]))
       (load qcd-fermion-hi () fa-h ([reg al-addr])) ; sic!
       (load qcd-fermion-lo () fa-l ([reg ah-addr])) ; sic!
       (op pointer-add () (src-x) ([reg src-x] [const (size-of Fermion)]))
       (op qcd-scalef () (g-c) ([reg ac-v] [reg fa-c]))
       (op qcd-madd-lohi () (g) ([reg g-c] [reg al-v] [reg fa-l] [reg ah-v] [reg fa-h]))
       (load qcd-fermion () fb-c ([reg ttt]))
       (load qcd-fermion-hi () fb-h ([reg bl-addr])) ; sic!
       (load qcd-fermion-lo () fb-l ([reg bh-addr])) ; sic!
       (op pointer-add () (ttt) ([reg ttt] [const (size-of Fermion)]))
       (op qcd-maddf () (g-1) ([reg g] [reg bc-v] [reg fb-c]))
       (op qcd-madd-lohi () (g-2) ([reg g-1] [reg bl-v] [reg fb-l] [reg bh-v] [reg fb-h]))
;       (store qcd-fermion () ([reg res-x]) [reg g-2])
       (op pointer-add () (res-x) ([reg res-x] [const (size-of Fermion)])))))
